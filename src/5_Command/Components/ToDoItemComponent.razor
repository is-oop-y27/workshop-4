@using Command.Models
@using Command.CommandConsumers
@using Command.Commands

@if (Item is not null)
{
    <PhazorReactiveValue Value="Item.NameObservable" Context="name">
        <MudListItem>
            <MudPaper Elevation="3" Style="padding: 10px">
                <MudStack Row="true">
                    <MudTextField T="string" TextChanged="@OnTextChanged" Text="@name" Immediate="false"/>
                    <MudIconButton OnClick="@OnRemoveClicked" Icon="@Icons.Material.Filled.Remove" Variant="Variant.Filled"/>
                </MudStack>
            </MudPaper>
        </MudListItem>
    </PhazorReactiveValue>
}

@code {

    [Parameter, EditorRequired]
    public ToDoList? List { get; set; }

    [Parameter, EditorRequired]
    public ToDoItem? Item { get; set; }

    [Parameter, EditorRequired]
    public ICommandConsumer? Consumer { get; set; }

    private void OnTextChanged(string value)
    {
        if (Item is null || Consumer is null)
            return;

        var command = new ChangeNameCommand(Item, value);
        Consumer.Consume(command);
    }

    private void OnRemoveClicked()
    {
        if (Item is null || List is null || Consumer is null)
            return;

        var command = new RemoveItemCommand(List, Item);
        Consumer.Consume(command);
    }

}